from collections import deque
def successor(current_s):
    pass
def BFS(start,goal):
    frontier = deque[(start,0)]
    visited = set()
    while len(frontier) != 0:
        current_state = frontier.popleft()
        visited.add(current_state[0])
        if current_state[0] == goal:
            return current_state[1]
        neighbours = successor(current_state)
        for neighbour in neighbours:
            if neighbour not in visited:
                frontier.append((neighbour,current_state[1]))
    
def CCC_Word_Hunt(word,r,c,matrix):
    answer = 0
    f_letter = word[0]
    all_f_letters = []
    for i in range(r):
        for j in range(c):
            if matrix[i][j] == f_letter:
                all_f_letters.append((i,j))
    for c in all_f_letters:
        if BFS(c):
            answer += 1
    if word[::-1] == word:
        answer = answer//2
        return answer
    else:
        return answer

def Take_input():
    word = input()
    r = int(input())
    c = int(input())
    matrix = []
    for _ in range(c):
        matrix.append(list(input().split()))
    return word,r,c,matrix

word,c,r,matrix = Take_input()
print(word,c,r,matrix)